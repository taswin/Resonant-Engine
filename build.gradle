buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'scala'
apply plugin: 'forge'
apply plugin: 'maven-publish'

ext.buildProps = file "build.properties"

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}"

if (System.getenv("TEAMCITY_BUILDCONF_NAME")?.equalsIgnoreCase("Production")) {
    group = "com.calclavia.resonantengine"
    archivesBaseName = System.getenv("TEAMCITY_PROJECT_NAME").replaceAll(" ", "-")
} else {
    group = "dev.calclavia.resonantengine"
    archivesBaseName = System.getenv("TEAMCITY_PROJECT_NAME")?.replaceAll(" ", "-") + "-" + System.getenv("TEAMCITY_BUILDCONF_NAME")
}

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}"
	
	replace "@MAJOR@", config.version.mod.major
	replace "@MINOR@", config.version.mod.minor
	replace "@REVIS@", config.version.mod.revis
	
	if (System.getenv("BUILD_NUMBER") != null) {
		replace "@BUILD@", System.getenv("BUILD_NUMBER")
	}
	else {
		replace "@BUILD@", 1
	}
}

if (System.getenv("BUILD_NUMBER") != null)
    version += ".${System.getenv("BUILD_NUMBER")}"

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task copyBuildXml(type: Copy) {
    from 'build.properties'
    into 'output'
}

/**
 * Generates a TeamCity XML changelog via the REST API.
 */
task("createChangelog").doLast {

    def teamCityURL = "http://ci.calclavia.com/"

    /**
     * Create a new file
     */
    def file = new FileOutputStream("output/changelog.xml")
    def out = new BufferedOutputStream(file)

    /**
     * Grab the build first, parse the XML to find the changelog XML URL
     */
    def changesXML = new XmlSlurper().parse(teamCityURL + "guestAuth/app/rest/changes?locator=build:(id:" + teamcity["teamcity.build.id"] + ")")
    def changes = changesXML.change

    /**
     * Add the XML definition header in the front of the file and remove all other occurrences of the XML header
     */
    out << ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><changes>")

    println("createChangelog: Identified " + changes.size() + " changes to be written into the changelog.")

    for (int i = 0; i < changes.size(); i++) {
        /**
         * Write each changelog XML into the URL
         */
        def changelogURL = teamCityURL + "guestAuth/app/rest/changes/id:" + changes[i].@id.text()
        out << new URL(changelogURL).getText().replaceAll("<\\?xml version=\"1\\.0\" encoding=\"UTF-8\" standalone=\"yes\"\\?>", "")
    }

    out << "</changes>"

    out.close()
}

jar {
    dependsOn copyBuildXml, createChangelog, javadocJar
    classifier = 'core'
	
	manifest {
        attributes FMLCorePlugin: "resonantengine.core.ResonantPlugin",
				   FMLCorePluginContainsFMLMod: "true"
    }
	
    destinationDir = file 'output'
}

task apiZip(type: Zip) {
    classifier = 'api'
    from sourceSets*.allSource
    include 'resonantengine/api/**'
    destinationDir = file 'output'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'dev'

    manifest {
        attributes FMLCorePlugin: "resonant.engine.ResonantPluginLoader",
				   FMLCorePluginContainsFMLMod: "true"
    }

    destinationDir = file 'output'
}

artifacts {
    archives apiZip
}

processResources {
	from(sourceSets.main.resources.srcDirs) {
		//include '**/*.lang'
		include '**/*.info'
		include '**/*.properties'

		expand 'version': project.version, 'mcversion': config.version.minecraft
		// replace version and MCVersion
	}

	// copy everything else, thats not text
	from(sourceSets.main.resources.srcDirs) {
		exclude '**/*.info'
		exclude '**/*.properties'
	}
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact deobfJar
			artifact apiZip

            artifact("output/changelog.xml") {
                classifier "changelog"
                extension "xml"
            }

            artifact("output/build.properties") {
                classifier "build"
                extension "properties"
            }
        }
    }
    repositories {
        maven {
            url "file://var/www/maven"
        }
    }
}

repositories {
    maven {
        url 'http://calclavia.com/maven'
    }
    maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven { 
        name 'OC Maven'
        url = "http://maven.cil.li/" }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
}

dependencies 
{
    testCompile 'junit:junit:4.11'
    compile "codechicken:CodeChickenLib:1.7.10-1.1.1.105:dev"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.4.29:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.3.66:dev"
    compile "mcp.mobius.waila:Waila:1.5.6_dev1_1.7.10"
    compile "li.cil.oc:OpenComputers:MC1.7.10-1.4.0.+:dev"
    compile "net.industrial-craft:industrialcraft-2:2.2.654-experimental:api"
}
